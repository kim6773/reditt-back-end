// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  username   String      @unique
  password   String
  posts      Post[]
  subreddits Subreddit[]
  upvotes    Upvote[]
  downvotes  Downvote[]
}

model Post {
  id          String     @id @default(uuid())
  text        String
  title       String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit  @relation(fields: [subredditId], references: [id])
  parentId    String?
  children    Post[]     @relation("parentChild")
  parent      Post?      @relation("parentChild", fields: [parentId], references: [id])
  subredditId String
  upvotes     Upvote[]
  downvotes   Downvote[]
}

model Subreddit {
  id     String @id @default(uuid())
  name   String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId String
  posts  Post[]
}

model Upvote {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId]) // Adds unique constraint to specify that a combination of userId and postId must be unique for each row in the Upvote table, effectively preventing a user from upvoting the same post multiple times
}

model Downvote {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId])
}
